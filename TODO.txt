- entity
    / handle floats
    ~ during generation, generate all bounding rects, crop all images (done with aseprite, but different action will not have optimal size), and dont
      forget to flip bonding rect when flipping sprite
    / collisions
/ shader abstraction
- particles
    / Caching img
        / colorkey
        / rotation
    / Provide colorkey
    / how to cache imgs and rotations, prolly shouldnt use animation (1 functionality principle)
    - alpha
    - glow
- animations
    ~ static images, nothing in animation
        - stored weirdly
    / when loading, if key in imgs, use that, else, check the other dict
    / rects wil only be saved for animation (just because it probably won't be used for static images, cause you just make png without any empty space)
/ timer
transitions
/ crt
- ui
	/ buttons
    - other uis like text or images
    - automatically loop through ui in state

- dt (?)

Unimportant
- Make a class for collecting objects. That way there is less repetition with
  for e, update() render(). Class can also handle removing elements when life
  exceeds duration
 Optimization: for particle copy's method, don't use deepcopy because
  animations and surfs are being duplicated too (?)
   - actually no cause img is a property not an attribute
- Allow different slices for different actions. But slices are buggy so maybe
  new rect method entirely
- Entity z attribute
- Use the layers in aseprite if neeed
- Is it better to set inputs to False or to remove them from dictionnary and
  use .get() ?
- use is called unnecessarily (at every frame) for mgl
- Rect changing dimensions/pos is not taken into account during collision. This
  happens when flipping with an asymetrical rect, so it doesn't happen so not a
  big deal frequently. And if it does happen, it just makes a snappy clip once
  you move, so not a big deal
- load_db for StaticImg could be done recursivly to allow you to organize. keys could be unique or include path
  images in different folders


















-- Garbage (framework2 code with some adaptation). Prolly won't be used

class CustomFont:

    FONTS_DIR = 'data/imgs/fonts'
    SPLIT_COLOR = (255, 0, 0)
    COLORKEY = (0, 0, 0)
    font_database = {}

    @staticmethod
    def load_font(font) -> dict:
        images = {}
        font_img = pygame.image.load(f'{CustomFont.FONTS_DIR}/{font}/{font}.png').convert()
        font_order = utils.open_json(f'{CustomFont.FONTS_DIR}/{font}/config.json')
        character_count = 0
        last_px = 0
        width = 0
        height = font_img.get_height()
        for px in range(font_img.get_width()):
            color = font_img.get_at((px, 0))
            if color == CustomFont.SPLIT_COLOR:
                width = px - width
                character_img = font_img.subsurface(last_px+1, 0, px - last_px, height).convert()
                character_img.set_colorkey(CustomFont.SPLIT_COLOR)
                character_img = utils.swap_colors(character_img, CustomFont.SPLIT_COLOR, CustomFont.COLORKEY)
                character_img.set_colorkey(CustomFont.COLORKEY)
                images[font_order[character_count]] = character_img
                last_px = px
                character_count += 1
        return images

    @classmethod
    def load_fonts(cls) -> dict:
        fonts = os.listdir(cls.FONTS_DIR)
        for font in fonts:
            f = os.path.join(cls.FONTS_DIR, font)
            if not os.path.isfile(f):
                font_database[font] = cls.generate_font(font)

    @staticmethod
    def render_line(surf: pygame.Surface, pos: tuple, text: str, characters: dict, CHARACTER_HEIGHT: int, rgb: tuple):
        '''Can only blit a line using a custom font, meaning that "\\n" will be intreperted as part of the line.
        The text will not go passed the surface's width, unless the surface's width is smaller than the width of a word.'''    
        text = text.split(' ')
        
        rendered_text = [[text[0]]]
        line = 0
        for word in text[1:]:
            line_text = rendered_text[line].copy()
            line_text.append(word)
            line_text_width = 0
            for character in ' '.join(line_text):
                line_text_width += characters[character].get_width()
            if line_text_width > surf.get_width() - pos[0]:
                rendered_text.append([])
                line += 1
            rendered_text[line].append(word)
                    
        for i, line in enumerate(rendered_text):
            x = 0
            for character in ' '.join(line):
                img = characters[character]
                if rgb != 255:
                    img = utils.swap_colors(img, (255, 255, 255), rgb)
                surf.blit(img, (pos[0] + x, pos[1] + (CHARACTER_HEIGHT + 1) * i))
                x += img.get_width()
                
        # The height of the rendered text
        return len(rendered_text)*(CHARACTER_HEIGHT+1)
            
    @staticmethod
    def render_wrapped_text(surf: pygame.Surface, pos: tuple, text: str, characters: dict, rgb: tuple) -> None:
        """Blits text using a custom font. 
        The text will not go passed the surface's width, unless the surface's width is smaller than the width of a word."""    
        # The given character shouldn't matter if every character has the same height
        CHARACTER_HEIGHT = characters[' '].get_height()
        y = 0
        for line in text.split('\n'):
            y += CustomFont.render_line(surf, (pos[0], pos[1] + y), line, characters, CHARACTER_HEIGHT + 1, rgb)
        
    @staticmethod
    def render_text(text: str, characters: dict, rgb: tuple) -> pygame.Surface:
        """Returns a surface of text (Which the custom font given)."""
        CHARACTER_HEIGHT = characters[' '].get_height()
        # The size of the text surface is the canvas's size temporarily.
        # because if the text's dimensions were to exceed this, 
        # it would be too big to go in the canvas in the first place.
        surf = pygame.Surface(config.CANV, SRCALPHA)
        x = 0
        for line_count, line in enumerate(text.split('\n')):
            for character in line:
                img = characters[character]
                img = swap_colors(img, (255, 255, 255), rgb)
                surf.blit(img, (x, line_count * CHARACTER_HEIGHT))
                x += img.get_width()
        output = pygame.Surface.subsurface(surf, (0, 0, x, (line_count + 1) * CHARACTER_HEIGHT))
        return output
        # return pygame.Surface.subsurface(surf, (0, 0, x, line_count * CHARACTER_HEIGHT))
    
font_database = generate_font_database()

